<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hiraemon.github.io</id>
    <title>hiraemon</title>
    <updated>2019-08-07T07:45:52.345Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hiraemon.github.io"/>
    <link rel="self" href="https://hiraemon.github.io/atom.xml"/>
    <subtitle>三人行必有我师</subtitle>
    <logo>https://hiraemon.github.io/images/avatar.png</logo>
    <icon>https://hiraemon.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, hiraemon</rights>
    <entry>
        <title type="html"><![CDATA[使用 github 作为远程 maven 仓库]]></title>
        <id>https://hiraemon.github.io/post/使用 github 作为远程 maven 仓库</id>
        <link href="https://hiraemon.github.io/post/使用 github 作为远程 maven 仓库">
        </link>
        <updated>2019-08-07T07:07:31.000Z</updated>
        <summary type="html"><![CDATA[<p>使用 github ,可以很方便的创建一个公开的 maven 仓库</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用 github ,可以很方便的创建一个公开的 maven 仓库</p>
<!-- more -->
<h6 id="jar-包部署-maven-仓库-先将-jar-deploy-到本地">jar 包部署 maven 仓库 :  先将 jar deploy 到本地</h6>
<blockquote>
<p>maven 可以通过 http, ftp, ssh 等 deploy 到远程服务器，也可以 deploy 到本地文件系统里</p>
<p>如果有多个jar 可以 deploy 到同一目录 push 到同一仓库</p>
</blockquote>
<pre><code>mvn deploy:deploy-file \ 
 -Dmaven.test.skip=true \ 
 -Dfile=D:\alipay-sdk-java-3.7.110.ALL.jar \
 -DgroupId=com.alipay.sdk 
 -DartifactId=alipay-sdk-java 
 -Dversion=3.7.110.ALL 
 -Dpackaging=jar 
 -DrepositoryId=marstark 
 -Durl=file://D:/maven-repo 
</code></pre>
<h6 id="推送到-github-仓库">推送到 github 仓库</h6>
<pre><code class="language-shell">cd /maven-repo
git init
git add .
git commit -m 'com.alipay.sdk:alipay-sdk-java:3.7.110.ALL'
git remote add origin https://github.com/xxx/maven-repo.git
git add
git push origin master
</code></pre>
<h6 id="如何使用">如何使用</h6>
<pre><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;
        &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;
        &lt;version&gt;3.7.110.ALL&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;


&lt;repositories&gt;
    &lt;!-- 配置仓库地址 --&gt;
    &lt;repository&gt;
        &lt;id&gt;mvn-repo&lt;/id&gt;
        &lt;url&gt;https://raw.github.com/xxx/maven-repo/master&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
    &lt;!-- 直接使用本地仓库:可以这样配置 --&gt;
    &lt;repository&gt;
        &lt;id&gt;local-repo&lt;/id&gt;
        &lt;url&gt;file://D:/maven-repo&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;	
</code></pre>
<h6 id="源码部署-maven-仓库">源码部署 maven 仓库</h6>
<p>使用 maven 发布插件 <code>maven-deploy-plugin</code> 生成本地仓库文件</p>
<blockquote>
<p>pom.xml 中可以通过 ${} 语法取到相应属性值,如: ${project.build.directory}</p>
</blockquote>
<pre><code class="language-xml">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.8.1&lt;/version&gt;
    &lt;configuration&gt;
        &lt;!-- 选择本地路径 --&gt;
        &lt;altDeploymentRepository&gt;
            internal.repo::default::file:D:/maven-repo
        &lt;/altDeploymentRepository&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>
<p>或者这样配置</p>
<pre><code class="language-xml">&lt;distributionManagement&gt;
    &lt;repository&gt;
        &lt;id&gt;local-repo&lt;/id&gt;
        &lt;url&gt;file://D:/maven-repo&lt;/url&gt;
    &lt;/repository&gt;
&lt;/distributionManagement&gt;
</code></pre>
<p>将本地仓库 push 到 github .</p>
<p>同时生成 source 包,添加以下 plugin</p>
<pre><code class="language-xml">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;attach-sources&lt;/id&gt;
            &lt;goals&gt;
                &lt;goal&gt;jar&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>
<h6 id="更多">更多</h6>
<hr>
<p>通过 <code>site-maven-plugin</code> 插件上传到  github ,在 项目的 pom.xml 中添加</p>
<pre><code class="language-xml">&lt;plugin&gt;
    &lt;groupId&gt;com.github.github&lt;/groupId&gt;
    &lt;artifactId&gt;site-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;0.12&lt;/version&gt;
    &lt;configuration&gt;
        &lt;message&gt;Maven artifacts for ${project.version}&lt;/message&gt;
        &lt;noJekyll&gt;true&lt;/noJekyll&gt;
        &lt;!-- 本地仓库路径 --&gt;
        &lt;outputDirectory&gt;D:/maven-repo&lt;/outputDirectory&gt;
        &lt;branch&gt;refs/heads/master&lt;/branch&gt;
        &lt;includes&gt;
            &lt;include&gt;**/*&lt;/include&gt;
        &lt;/includes&gt;
        &lt;!--  https://github.com/settings/profile &gt;&gt; Public profile  &gt;&gt; set Name [xxx] &gt;&gt; Update Profile   --&gt;
        &lt;repositoryOwner&gt;${Name}&lt;/repositoryOwner&gt;
        &lt;!-- github 仓库名称 --&gt;
        &lt;repositoryName&gt;maven-repo&lt;/repositoryName&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;goals&gt;
                &lt;goal&gt;site&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;phase&gt;deploy&lt;/phase&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>
<p>在 maven 配置文件 setting.xml 添加</p>
<pre><code class="language-xml">&lt;servers&gt;
    &lt;server&gt;
        &lt;id&gt;github&lt;/id&gt;
        &lt;username&gt;marstark&lt;/username&gt;
        &lt;password&gt;password&lt;/password&gt;
    &lt;/server&gt;
&lt;/servers&gt;
</code></pre>
<p>执行</p>
<pre><code class="language-shell">mvn clean deploy
</code></pre>
]]></content>
    </entry>
</feed>